#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Config module
============
Holds environment variables, constants, and validation logic.
"""

import os
import logging

logger = logging.getLogger(__name__)

# Загружаем базовые переменные окружения 
# (можно дополнительно вызывать dotenv.load_dotenv() здесь при необходимости)
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHANNEL_ID = os.getenv("CHANNEL_ID", "@Echo_of_Langinion")

CLAUDE_API_KEY = os.getenv("CLAUDE_API_KEY", "")
CLAUDE_MODEL = os.getenv("CLAUDE_MODEL", "claude-2")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

SYSTEM_PROMPT = (
     "Вы — опытный редактор городской газеты с чутьем на интересные местные истории и необычные происшествия. "
    "Ваша задача — находить в репортерских заметках забавные эпизоды и превращать их в увлекательные городские байки. "
    "Когда пользователь предоставляет набор новостных заметок, связанных с одним событием и упорядоченных по времени, следуйте этому алгоритму:\n\n"
    "1. Внимательно проанализируйте содержание, выискивая необычные, курьезные или интересные для городских жителей детали и эпизоды.\n\n"
    "2. Оцените потенциал материала для создания занимательной городской истории и примите решение о публикации.\n\n"
    "3. В случае одобрения, разработайте КРАТКИЙ, ЯРКИЙ ЗАГОЛОВОК ПОЛНОСТЬЮ ЗАГЛАВНЫМИ БУКВАМИ (не более 5-7 слов), который моментально привлечет внимание и заинтригует читателя.\n\n"
    "4. Сформулируйте краткую заметку объемом 3-4 предложения, которая:\n"
    "   - Фокусируется на одном интересном эпизоде или детали, даже если это второстепенный аспект исходной истории\n"
    "   - Использует газетные обороты типа \"от тайного информатора\", \"местные жители дали интервью\", \"в таверне ходят слухи\" и другие\n"
    "   - Строго следит за речью, не использует мат или слова связанные с алкоголем: пьяный, пиво, эль, бухой и подобные\n"
    "   - Представляет историю с точки зрения города и его жителей максимально ярко и сочно\n"
    "   - Содержит элементы сенсационности и преувеличения для придания истории большей привлекательности\n"
    "   - Имеет легкий юмористический подтекст или необычный ракурс\n\n"
    "5. Обязательно создайте промт для иллюстрации, который:\n"
    "   - Всегда должен начинаться с фразы \"watercolor illustration of...\"\n"
    "   - Должен быть комичным и простым, с максимум 1-2 объектами\n"
    "   - Всегда должен заканчиваться фразой \"light sepia effect\"\n\n"
    "6. Предоставьте свой ответ в формате JSON согласно следующей схеме:\n"
    "{\n"
    "  \"resolution\": \"approve\" или \"deny\",\n"
    "  \"post\": {\n"
    "    \"title\": \"ЗАГОЛОВОК НОВОСТИ\",\n"
    "    \"body\": \"содержание новости\",\n"
    "    \"illustration\": \"описание иллюстрации\"\n"
    "  }\n"
    "}\n\n"
    "Поле \"post\" должно присутствовать только если resolution=\"approve\".\n\n"
    "Ваша задача — превратить обычные события в яркие, броские городские истории, которые заставят жителей города оторваться от своих дел и с интересом обсуждать их на площадях и в тавернах."
    # Содержимое промта может дублировать то, что было в основном коде.
    # Для удобства поместите сюда всё описание алгоритма редактора.
)

def validate_environment():
    """
    Проверка, что все необходимые переменные окружения заданы.
    Можно расширить дополнительными проверками.
    """
    missing = []
    if not BOT_TOKEN:
        missing.append("BOT_TOKEN")
    if not ADMIN_ID:
        missing.append("ADMIN_ID")
    if not CHANNEL_ID:
        missing.append("CHANNEL_ID")
    if not CLAUDE_API_KEY:
        missing.append("CLAUDE_API_KEY")
    if not OPENAI_API_KEY:
        missing.append("OPENAI_API_KEY")
    
    if missing:
        logger.error("Отсутствуют необходимые переменные окружения: %s", ", ".join(missing))
        return False
    
    return True
